import { Ctx, Update, Start, Command, Action } from 'nestjs-telegraf';
import { BotContext } from './bot.context';
import { Config } from './config';
import axios from 'axios';

@Update()
export class BotUpdate {
  @Start()
  async startCommand(@Ctx() ctx: BotContext) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–†—É—Å—Å–∫–∏–π', callback_data: 'set_lang_ru' },
            { text: '–ö—ã—Ä–≥—ã–∑—á–∞', callback_data: 'set_lang_kg' },
          ],
        ],
      },
    });
  }

  @Action('set_lang_ru')
  async setLanguageRu(@Ctx() ctx: BotContext) {
    ctx.session.language = 'ru';
    await ctx.reply(
      '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /questions –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.',
    );
    await ctx.answerCbQuery();
  }

  @Action('set_lang_kg')
  async setLanguageKg(@Ctx() ctx: BotContext) {
    ctx.session.language = 'kg';
    await ctx.reply(
      '–¢–∏–ª –ö—ã—Ä–≥—ã–∑—á–∞ –±–æ–ª—É–ø –æ—Ä–Ω–æ—Ç—É–ª–¥—É. –°—É—Ä–æ–æ–ª–æ—Ä —Ç–∏–∑–º–µ—Å–∏ “Ø—á“Ø–Ω /questions –¥–µ–≥–µ–Ω–¥–∏ –∫–æ–ª–¥–æ–Ω—É“£—É–∑.',
    );
    await ctx.answerCbQuery();
  }

  @Command('questions')
  async sendQuestions(@Ctx() ctx: BotContext) {
    const language = ctx.session.language || 'ru';

    const isTelegramSubscribed = await this.checkTelegramSubscription(
      ctx.from.id,
    );
    // const isInstagramSubscribed = await this.checkInstagramSubscription();

    if (!isTelegramSubscribed) {
      const message =
        language === 'ru'
          ? '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.'
          : '‚ùå –°–∏–∑ –±–∞—Ä–¥—ã–∫ –∫–∞–Ω–∞–ª–¥–∞—Ä–≥–∞ –∫–∞—Ç—Ç–∞–ª–≥–∞–Ω —ç–º–µ—Å—Å–∏–∑. –°—É—Ä–æ–æ–ª–æ—Ä–¥—É –∞–ª—É—É “Ø—á“Ø–Ω –∫–∞—Ç—Ç–∞–ª—ã“£—ã–∑.';
      const buttons = [];
      if (!isTelegramSubscribed) {
        buttons.push([
          {
            text:
              language === 'ru'
                ? 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram'
                : 'üîó –¢–µ–ª–µ–≥—Ä–∞–º–≥–∞ –∫–∞—Ç—Ç–∞–ª—É—É',
            url: `https://t.me/${Config.TELEGRAM_CHANNEL_ID.replace('@', '')}`,
          },
        ]);
      }
      //   if (!isInstagramSubscribed) {
      //     buttons.push([
      //       {
      //         text:
      //           language === 'ru'
      //             ? 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram'
      //             : 'üîó –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–≥–∞ –∫–∞—Ç—Ç–∞–ª—É—É',
      //         url: 'https://www.instagram.com/mamytbekov_o/',
      //       },
      //     ]);
      //   }
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: buttons },
      });
      return;
    }

    const questions = {
      ru: [
        [
          {
            text: 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç',
            callback_data: 'question_printer_not_working',
          },
        ],
        [{ text: 'üìÑ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', callback_data: 'question_blank_pages' }],
        [{ text: 'üìÑ –ë—É–º–∞–≥–∞ –∑–∞—Å—Ç—Ä—è–ª–∞', callback_data: 'question_paper_jam' }],
      ],
      kg: [
        [
          {
            text: 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä –∏—à—Ç–µ–±–µ–π –∂–∞—Ç–∞—Ç',
            callback_data: 'question_printer_not_working',
          },
        ],
        [
          {
            text: 'üìÑ –¢–∞–∑–∞ –±–∞—Ä–∞–∫—Ç–∞—Ä —á—ã–≥–∞—Ç',
            callback_data: 'question_blank_pages',
          },
        ],
        [
          {
            text: 'üìÑ –ö–∞–≥–∞–∑ —Ç—ã–≥—ã–ª—ã–ø –∫–∞–ª–¥—ã',
            callback_data: 'question_paper_jam',
          },
        ],
      ],
    };

    const message =
      language === 'ru'
        ? '‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:'
        : '‚úÖ –°–∏–∑–¥–∏ –∫—ã–∑—ã–∫—Ç—ã—Ä–≥–∞–Ω —Å—É—Ä–æ–æ–Ω—É —Ç–∞–Ω–¥–∞“£—ã–∑:';

    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: questions[language],
      },
    });
  }

  @Action('question_printer_not_working')
  async questionPrinterNotWorking(@Ctx() ctx: BotContext) {
    const language = ctx.session.language || 'ru';
    const answer =
      language === 'ru'
        ? 'üñ®Ô∏è –ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –±—É–º–∞–≥–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [HP Support](https://support.hp.com)'
        : 'üñ®Ô∏è –≠–≥–µ—Ä–¥–µ –ø—Ä–∏–Ω—Ç–µ—Ä –∏—à—Ç–µ–±–µ–π –∂–∞—Ç—Å–∞, —Ç—É—Ç–∞—à—É—É–Ω—É, –¥—Ä–∞–π–≤–µ—Ä–ª–µ—Ä–¥–∏ –∂–∞–Ω–∞ –∫–∞–≥–∞–∑–¥—ã —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑. –¢–æ–ª—É–≥—É—Ä–∞–∞–∫: [HP Support](https://support.hp.com)';

    await ctx.replyWithMarkdown(answer);
    await ctx.answerCbQuery();
  }

  @Action('question_blank_pages')
  async questionBlankPages(@Ctx() ctx: BotContext) {
    const language = ctx.session.language || 'ru';
    const answer =
      language === 'ru'
        ? 'üìÑ –ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–µ—á–∞—Ç–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–Ω–∏–ª –∏–ª–∏ —Ç–æ–Ω–µ—Ä–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [Epson Support](https://www.epson.com/support)'
        : 'üìÑ –≠–≥–µ—Ä–¥–µ –ø—Ä–∏–Ω—Ç–µ—Ä —Ç–∞–∑–∞ –±–∞—Ä–∞–∫—Ç–∞—Ä–¥—ã —á—ã–≥–∞—Ä—ã–ø –∂–∞—Ç—Å–∞, —Å—ã—è–Ω—ã –∂–µ —Ç–æ–Ω–µ—Ä–¥–∏–Ω –¥–µ“£–≥—ç—ç–ª–∏–Ω —Ç–µ–∫—à–µ—Ä–∏“£–∏–∑. –¢–æ–ª—É–≥—É—Ä–∞–∞–∫: [Epson Support](https://www.epson.com/support)';

    await ctx.replyWithMarkdown(answer);
    await ctx.answerCbQuery();
  }

  @Action('question_paper_jam')
  async questionPaperJam(@Ctx() ctx: BotContext) {
    const language = ctx.session.language || 'ru';
    const answer =
      language === 'ru'
        ? 'üìÑ –ï—Å–ª–∏ –±—É–º–∞–≥–∞ –∑–∞—Å—Ç—Ä—è–ª–∞, –≤—ã–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä –∏ —É–¥–∞–ª–∏—Ç–µ –±—É–º–∞–≥—É –≤—Ä—É—á–Ω—É—é. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [Canon Support](https://www.canon.com/support)'
        : 'üìÑ –≠–≥–µ—Ä–¥–µ –∫–∞–≥–∞–∑ —Ç—ã–≥—ã–ª—ã–ø –∫–∞–ª—Å–∞, –ø—Ä–∏–Ω—Ç–µ—Ä–¥–∏ ”©—á“Ø—Ä“Ø–ø, –∫–∞–≥–∞–∑–¥—ã –∫–æ–ª –º–µ–Ω–µ–Ω –∞–ª—ã“£—ã–∑. –¢–æ–ª—É–≥—É—Ä–∞–∞–∫: [Canon Support](https://www.canon.com/support)';

    await ctx.replyWithMarkdown(answer);
    await ctx.answerCbQuery();
  }

  private async checkTelegramSubscription(userId: number): Promise<boolean> {
    try {
      const url = `https://api.telegram.org/bot${Config.TELEGRAM_TOKEN}/getChatMember`;
      const response = await axios.get(url, {
        params: {
          chat_id: Config.TELEGRAM_CHANNEL_ID,
          user_id: userId,
        },
      });

      const status = response.data.result.status;
      return ['member', 'administrator', 'creator'].includes(status);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
      return false;
    }
  }

  private async checkInstagramSubscription(): Promise<boolean> {
    try {
      const url = `https://graph.facebook.com/v12.0/${Config.INSTAGRAM_ACCOUNT_ID}/followers`;
      const response = await axios.get(url, {
        params: { access_token: Config.INSTAGRAM_ACCESS_TOKEN },
      });

      const followers = response.data.data;
      console.log('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:', followers);
      return followers.length > 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Instagram –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
      return false;
    }
  }
}
